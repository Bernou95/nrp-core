#!groovy
pipeline {
    environment {
        NexusDockerRegistryUrl = "${env.NEXUS_REGISTRY_IP}:${env.NEXUS_REGISTRY_PORT}"
    }
    agent none
    options {
        // Abort a build on timeout
        timeout(time: 3, unit: 'HOURS') 
    }

    stages {
       
        stage('Build images') {
            agent {
                label 'cd_label'
            }
            steps {
                bitbucketStatusNotify(buildState: 'INPROGRESS')
                withCredentials([usernamePassword(credentialsId: 'nexusadmin', usernameVariable: 'USER', passwordVariable: 'PASSWORD')])
                {
                    sh 'docker login -u $USER -p $PASSWORD ${NexusDockerRegistryUrl}'
                }
                sh 'docker-compose build && docker-compose push'
                sh 'docker logout ${NexusDockerRegistryUrl}'
            }
        }

        stage('Build and Test'){
            parallel 
            {
                stage('NEST + GAZEBO')
                {
                    agent
                    {
                        docker
                        {
                            label 'cd_label'
                            registryUrl "https://${NexusDockerRegistryUrl}"
                            image "${NexusDockerRegistryUrl}/nrp-core/nrp-gazebo-nest-ubuntu20:latest"
                            registryCredentialsId 'nexusadmin'
                            args '-u nrpuser:nrpgroup --privileged --net=host'
                        }
                    }
                    steps
                    {
                        sh 'export CMAKE_CACHE_FILE=.ci/cmake_cache/nest-gazebo.cmake; bash .ci/11-prepare-build.sh'
                        sh 'bash .ci/20-build.sh'
                        lock("${NODE_NAME}-nrp-core-unit-tests") {
                            sh 'bash .ci/30-run-tests.sh'
                        }
                        sh 'bash .ci/40-run-cppcheck.sh'
                        xunit (
                        thresholds: [
                            skipped(failureThreshold: '3'),
                            failed(failureThreshold: '0')
                            ],
                        tools: [CTest(
                            pattern: 'build/Testing/**/*.xml',
                            deleteOutputFiles: true,
                            failIfNotNew: false,
                            skipNoTestFiles: false,
                            stopProcessingIfError: true
                            ),
                            JUnit(
                            pattern: 'build/xml/*.xml',
                            deleteOutputFiles: true,
                            failIfNotNew: false,
                            skipNoTestFiles: false,
                            stopProcessingIfError: true
                            )]
                        )
                    }
                }
                stage('NEST + GAZEBO - no MQTT no ROS')
                {
                    agent
                    {
                        docker
                        {
                            label 'cd_label'
                            registryUrl "https://${NexusDockerRegistryUrl}"
                            image "${NexusDockerRegistryUrl}/nrp-core/nrp-gazebo-nest-ubuntu20:latest"
                            registryCredentialsId 'nexusadmin'
                            args '-u nrpuser:nrpgroup --privileged --net=host'
                        }
                    }
                    steps
                    {
                        sh 'export CMAKE_CACHE_FILE=.ci/cmake_cache/nest-gazebo-nomqtt-noros.cmake; bash .ci/11-prepare-build.sh'
                        sh 'bash .ci/20-build.sh'
                        lock("${NODE_NAME}-nrp-core-unit-tests") {
                            sh 'bash .ci/30-run-tests.sh'
                        }
                        sh 'bash .ci/40-run-cppcheck.sh'
                        xunit (
                        thresholds: [
                            skipped(failureThreshold: '3'),
                            failed(failureThreshold: '0')
                            ],
                        tools: [CTest(
                            pattern: 'build/Testing/**/*.xml',
                            deleteOutputFiles: true,
                            failIfNotNew: false,
                            skipNoTestFiles: false,
                            stopProcessingIfError: true
                            ),
                            JUnit(
                            pattern: 'build/xml/*.xml',
                            deleteOutputFiles: true,
                            failIfNotNew: false,
                            skipNoTestFiles: false,
                            stopProcessingIfError: true
                            )]
                        )
                    }
                }
                stage('Vanilla NRP')
                {
                    agent
                    {
                        docker
                        {
                            label 'cd_label'
                            registryUrl "https://${NexusDockerRegistryUrl}"
                            image "${NexusDockerRegistryUrl}/nrp-core/nrp-vanilla-ubuntu20:latest"
                            registryCredentialsId 'nexusadmin'
                            args '-u nrpuser:nrpgroup --privileged --net=host'
                        }
                    }
                    steps
                    {
                        sh 'export CMAKE_CACHE_FILE=.ci/cmake_cache/vanilla.cmake; bash .ci/11-prepare-build.sh'
                        sh 'bash .ci/20-build.sh'
                        lock("${NODE_NAME}-nrp-core-unit-tests") {
                            sh 'bash .ci/30-run-tests.sh'
                        }
                        sh 'bash .ci/40-run-cppcheck.sh'
                        xunit (
                        thresholds: [
                            skipped(failureThreshold: '3'),
                            failed(failureThreshold: '0')
                            ],
                        tools: [CTest(
                            pattern: 'build/Testing/**/*.xml',
                            deleteOutputFiles: true,
                            failIfNotNew: false,
                            skipNoTestFiles: false,
                            stopProcessingIfError: true
                            ),
                            JUnit(
                            pattern: 'build/xml/*.xml',
                            deleteOutputFiles: true,
                            failIfNotNew: false,
                            skipNoTestFiles: false,
                            stopProcessingIfError: true
                            )]
                        )
                    }
                }
                stage('Vanilla NRP - no MQTT no ROS')
                {
                    agent
                    {
                        docker
                        {
                            label 'cd_label'
                            registryUrl "https://${NexusDockerRegistryUrl}"
                            image "${NexusDockerRegistryUrl}/nrp-core/nrp-vanilla-ubuntu20:latest"
                            registryCredentialsId 'nexusadmin'
                            args '-u nrpuser:nrpgroup --privileged --net=host'
                        }
                    }
                    steps
                    {
                        sh 'export CMAKE_CACHE_FILE=.ci/cmake_cache/vanilla-nomqtt-noros.cmake; bash .ci/11-prepare-build.sh'
                        sh 'bash .ci/20-build.sh'
                        lock("${NODE_NAME}-nrp-core-unit-tests") {
                            sh 'bash .ci/30-run-tests.sh'
                        }
                        sh 'bash .ci/40-run-cppcheck.sh'
                        xunit (
                        thresholds: [
                            skipped(failureThreshold: '3'),
                            failed(failureThreshold: '0')
                            ],
                        tools: [CTest(
                            pattern: 'build/Testing/**/*.xml',
                            deleteOutputFiles: true,
                            failIfNotNew: false,
                            skipNoTestFiles: false,
                            stopProcessingIfError: true
                            ),
                            JUnit(
                            pattern: 'build/xml/*.xml',
                            deleteOutputFiles: true,
                            failIfNotNew: false,
                            skipNoTestFiles: false,
                            stopProcessingIfError: true
                            )]
                        )
                    }
                }
            }
        }
    }

    post {
        aborted {
            bitbucketStatusNotify(buildState: 'FAILED', buildDescription: 'Build aborted!')
        }
        failure {
            bitbucketStatusNotify(buildState: 'FAILED', buildDescription: 'Build failed, see console output!')
        }
        success{
            bitbucketStatusNotify(buildState: 'SUCCESSFUL', buildDescription: 'branch ' + env.BRANCH_NAME)
        } 
    }
}
