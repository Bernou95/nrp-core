/*! \page sync_model_details Synchronization Model

An experiment in nrp-core consists of multiple Engine processes which synchronize with the main SimulationLoop process at fixed intervals of time (ie. simulation time, see below). The length of these intervals is determined by the Engine time step, which can be different for each engine and is set in the experiment configuration by the EngineTimestep parameter. See \ref engine_base_schema "here" for more details about engine configuration.

The SimulationLoop also has its own time step defined by SimulationTimestep parameter in the experiment configuration. 

\section sim_timeline Simulation time and time frame

All references to time in this page must be understood as "simulation time". The communication between the Engines and the SimulationLoop is always synchronous and all time values and parameters refer to simulation time in each of the engines, with the exception of timeouts that can set in the SimulationLoop for waiting for engine response.

It is assumed that there is an unique time frame common to all engines participating in an experiment. Furthermore all engines are assumed to be at time t=0 at the beginning of the experiment. All engine client implementations must override EngineClientInterface::runLoopStep(), which requests the corresponding Engine to advance its simulation by a amount of time given by its input parameter <i>timeStep</i>.

\section engine_sync Communication with Engines 

There are two means of communication between SimulationLoop and Engines:
- requests to advance the engine simulation, by calling runLoopStep() in the corresponding EngineClient
- exchange of devices either (1) from Engines to SimulationLoop, by calling updateDevicesFromEngine() or (2) from SimulationLoop to Engines, by calling sendDevicesToEngine(). 

Which particular devices are requested and sent is determined by the inputs and outputs of the \ref transceiver_function "transceiver functions" present in the experiment. The set of input devices for all TFs define a device pool or cache which is stored in the SimulationLoop process heap. The device cache is updated as Engines complete a simulation step. This cache is actually divided among the different EngineClients in the experiment, each of them storing those devices coming from their linked Engines. EngineClients also manage all the communication between the SimulationLoop process and the Engines, including requests to advance the simulation and sending or requesting devices. 


\section step_structure SimulationLoop step structure

SimulationLoop::runLoop() is the main function in which the synchronization and communication between engines and the SimulationLoop process is managed. It takes a parameter, `runLoopTime`, which indicates the amount of (simulation) time expressed in seconds that the experiment simulation will be advanced by.

The choice of the terms runLoop and runLoopStep can be better understood by looking at the SimulationLoop step structure diagram below. Once runLoop() is called, the simulation loop will be repeated until the simulation time of all the engines in the experiment is `t >= t0 + runLoopTime`, being `t0` the time of the simulation loop when runLoop() is called.

\image html simulation_loop_step.png "SimulationLoop step structure"

Each simulation loop consists on the next steps:

1. The set of engines which should complete their current step next is computed 
2. Execution blocks until all of these engines have actually completed their current step (waitForStepCompletion)
3. Devices required by any of the active TFs are requested from these engines and saved in the device cache of the respective engine clients (updateDevicesFromEngine)
4. Active PFs linked with these engines are executed  and their output saved in the device cache of the respective engine (executeActiveLinkedPFs)
5. Active TFs linked with these engines are executed (executeActiveLinkedTFs)
6. Output Devices from the TFs are sent to their respective engines (sendDevicesToEngine)
7. Idle engines are requested to advance their simulations another time step (runLoopStep)

This structure ensures that: 1) TFs always operate with the freshest devices available, including preprocessed devices; 2) When engines are restarted they have always been updated with the devices returned by the TFs linked to them.

\section initial_loop case t=0, first simulation loop and empty devices

As commented above, all engine simulation are supposed to be at t=0 at the beginning of the simulation. In this first simulation loop, all engines are synchronized since none of them have still advanced their simulations. This means that also all TFs are executed and all devices in the device pool are requested. 

The main implication of the former is that engines are supposed to be able to provide their registered devices even before they have advanced their simulation for the first time. Since this won't be always possible, Engines are allowed to return empty devices. Device Python wrappers have an `isEmpty()` method which can be used in TFs to check if devices are empty and adapt their behavior if this is the case.

*/