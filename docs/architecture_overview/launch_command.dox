/*! \page launch_command Launch Commands

\ref process_launcher relies on launch commands to implement the actual launching behavior. 
All Launch Commands are derived from LaunchCommand class.
LaunchCommand is a templated class with a single parameter `LAUNCH_COMMAND` of type `const char*`. 
This parameter allows process launchers to infer the right LaunchCommand to use from the Engine configuration.
See the section \ref configuration_schema below for more details.

Currently, there are three launch commands available for launching engine processes:

- EmptyLaunchCommand : Dummy launch command. Leaves the actual launching of the engine to the user
- BasicFork (default): launches the engine server in an independent process
- DockerLauncher: launches the engine server in a (possibly remote) docker container. Since this case is more complex than the previous ones and requires additional configuration, a section below is devoted to describing its functioning and behavior: \ref docker_launcher

\section configuration_schema Configuration Schema

In the experiment configuration file, the LaunchCommand that will be used to launch each of the engines in the experiment, can be specified.
This is done by setting the parameter `EngineLaunchCommand` in the Engine configuration (see \ref engine_base_schema "here" for more details about Engines configuration schema), which is a JSON object defining which launch command will be used to launch the Engine process and required parameters, if any.

The only required parameter in `EngineLaunchCommand` JSON object is `LaunchType` which allows ProcessLauncher to decide which LaunchCommand to use as described above in this page.

The default value for `EngineLaunchCommand` is `{"LaunchType":"BasicFork"}`.

When adding a new LaunchCommand to nrp-core, developers must create a schema specifying its LaunchType and its parameters; the created schema has to be referred by and listed in the \ref engine_base_schema_schema "EngineBase Schema" "EngineLaunchCommand" OneOf field. 
The format for additional LaunchCommand schemas is the following:
\code{.json}
{
  "<command_name>" : {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "...",
    "description": "...",
    "$id": "#<command_id>",
    "properties" : {
      "LaunchType":{
        "type": "string",
        "const": "<LAUNCH_COMMAND template parameter used in the implemented LaunchCommand class>"
      },
      <other properties>
    },
	"required" : ["LaunchType"]
  }
}
\endcode
The required property `"LaunchType"` is a const string value that uniquely defines the new LaunchCommand type.

\section docker_launcher DockerLauncher

The DockerLauncher launch command launches an Engine inside of a docker container. It connects to a docker daemon running on a (possibly remote) host.
The IP used to connect to the docker daemon is specified in the launch command configuration.

For more details about the components involved in launching Engines in docker containers see \ref fti_lifecycle_components_docker "this diagram".

\subsection docker_launcher_engine_param Remote Engine configuration

Due to the distributed nature of the experiments when using a DockerLauncher, some Engine parameters that can be usually left with their default values, must be set properly.
These usually involve IP addresses. 
For example, in the case of a PythonJSONEngine, the following parameters should be taken care of:

- `"DockerDaemonAddress"` is the IP address of the remote docker daemon.
- `"ServerAddress"` is the IP address of engine running inside of the docker container (in the remote host)
- `"RegistrationServerAddress"` is the IP address of NRPCore

If `"ServerAddress"` and `"RegistrationServerAddress"` are left unset, docker daemon and NRP-Core are assumed to be running in the same host.
If the Engine process will be run in a remote host, `"ServerAddress"` and `"RegistrationServerAddress"` must be set properly.

In conclusion, when running Engines in remote hosts their configuration parameters should be carefully reviewed.

\subsection docker_launcher_schema Schema

Below are listed the parameters required to configure DockerLauncher:

<table>
<tr><th>Name<th>Description<th>Type<th>Default<th>Required<th>Array
<tr><td>LaunchType<td>The type of LaunchCommand<td>const string<td>DockerLauncher<td>X<td>
<tr><td>DockerDaemonAddress<td>The IP address of manager host to connect<td>string<td>unix:///var/run/docker.sock<td><td>
<tr><td>ImageName<td>The name of docker image to be used<td>string<td><td>X<td>
<tr><td>UploadFolder<td>The name of the folder containing experiment data to be uploaded to the Docker container<td>string<td>""<td><td>
<tr><td>PrintLogs<td>If true, prints the console output from the Docker container when shutting down the process<td>boolean<td>true<td><td>
</table>

The complete schema is listed below:

\include config_schemas/launch_commands/docker_launcher_cmd.json

\subsection docker_launcher_engines Usage

The preconditions for using DockerLauncher to run Engines are:
1. Docker daemon is properly setup in the the (remote) host (see this \ref configuring_docker_daemon "guide" for more information)
2. There is an nrp-core docker image available in the host containing the Engine itself and its dependencies (e.g. the simulator and its requirements). See this \ref docker_compose "guide" for information about building nrp-core docker images

Provided that, DockerLauncher can then be employed by setting up the experiment configuration as explained in the sections above.

The page \ref running_example_docker_exp contains more details and examples on the use of DockerLauncher.

*/