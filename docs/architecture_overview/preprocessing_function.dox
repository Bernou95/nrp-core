/*! \page preprocessing_function Preprocessing Functions

Preprocessing Functions are introduced as a mean to optimize on expensive computations on datapacks attached to a single engine. In some cases there might be the need for applying the same operations on a particular datapack in multiple TFs. An example of this might be to apply a filter to an image datapack coming from a physics simulator. In order to allow to execute this operations just once and let other TFs to access the processed datapack data, \ref PreprocessingFunction "PreprocessingFunctions" (PFs) are introduced.

They are similar to \ref transceiver_function both in implementation and behavior. Both are Python functions, their input and output are DataPacks and they are linked to an specific engine. PFs are also executed if and only if its linked Engine is synchronized. 

They show two main differences with respect to TFs:
- Their output datapacks are not sent to the corresponding Engines, they are kept in a local datapack cache and can be used as input in TFs
- PFs just can take input datapacks from the Engine they are linked to. In the same way, output datapacks can just be attached to this same Engine

The latter constraints are necessary to guarantee that new datapacks retrieved from a particular Engine are always processed by its connected PFs. In this way PFs can be thought as simple filters that read and transform datapacks coming from a certain Engine and store the processed data in the local datapack cache.

To declare a function as PreprocessingFunction, the decorator:

\code{.py}
@PreprocessingFunction("engine_name")
\endcode

must be prepended to its definition.

In order to use the datapacks returned by PFs in other TFs, a dedicated decorator is available and must be used:

\code{.py}
@PreprocessedDataPack(keyword, id)
\endcode

The difference between this decorator and FromEngineDataPack is that with the latter it is indicated that the datapack should be requested from its linked engine. While the use the PreprocessedDataPack decorator tells that the datapack can be directly taken from the local datapack cache.

Since the output of PFs is stored in the local cache and does not need to process on the Engine Server side, <b>PFs can return any type of DataPack without restrictions</b>. 

There is a DataPack type particularly convenient to use as PF output: <b>PythonDataPack</b>. This type of datapack stores a Python dictionary, and thus any type of data can be attached to it. Below is an example taking a camera image from \ref gazebo_engine "Gazebo" and returning the processed data as a PythonDataPack object.

\include husky_braitenberg_with_preprocessing/grayscale.py

*/