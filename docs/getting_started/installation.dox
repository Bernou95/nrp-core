/*! \page installation Installation Instructions

The instructions required to install NRP-core from the source (the only option currently available) are listed below.

\section installation_requirements Requirements

<b>WARNING:</b> Previous versions of the NRP install forked versions of several libraries, particularly NEST and Gazebo. Installing NRP-core in a system where a previous version of NRP is installed is known to cause conflicts. We strongly recommend not to do it.

\subsection os Operative System

NRP-core has only been tested on <b>Ubuntu 20.04</b> at the moment, and therefore this OS and version are recommended. Installation in other environments might be possible but has not been tested yet.

\subsection nest_version NEST

NRP-core only supports <b>NEST 3</b>.

As part of the installation process NEST 3 is built and installed. If you have an existing installation of NEST we recommend you to uninstall it before installing NRP-core. In case you still want to use your installed version, you can avoid the installation process to build and install NEST by changing the value of <i>ENABLE_NEST</i> from <i>FULL</i> to <i>CLIENT</i> in the root CMakeLists.txt file:

\code{.sh}
set(ENABLE_NEST CLIENT)
\endcode

In any case, be aware that NEST 2.x is incompatible with NRP-core.

\dontinclude README.md

\section installation_dependencies Dependency Installation
\skip Start of dependencies installation
\until End of dependencies installation

\section installation_procedure Installation
\skip Start of installation
\until End of installation

\section installation_environment Setting the environment

In order to properly set the environment to run experiments with NRP-core, please make sure to add the lines below to your ~/.bashrc file
\skip Start of setting environment
\until End of setting environment

\section installation_sim Steps for installing additional simulators
This section includes installation steps for simulators that may be used with \ref python_json_engine and \ref pysim_engine.
The \ref pysim_engine "PySim engine" allows to connect a set of simulators with Python interfaces with NRP-Core, these include OpenAI Gym, Mujoco, and OpenSim.

\subsection installation_sim_tvb Installation of The Virtual Brain

The instructions below install TVB root and data directly from git repositiories.
It is also possible to install them via pip, but then certain features and data sets may not be accessible.
Complete instructions can be found at <a href="https://github.com/the-virtual-brain/tvb-root">tvb-root</a> and <a href="https://github.com/the-virtual-brain/tvb-data">tvb-data</a>
repository pages.

\code{.sh}
# Install a tool that aliases python3 as python. Needed for TVB installation
sudo apt install python-is-python3

# TVB data
mkdir $HOME/tvb
cd $HOME/tvb
git clone https://github.com/the-virtual-brain/tvb-data.git
cd tvb-data
sudo python3 setup.py develop

# TVB root
cd $HOME/tvb
git clone https://github.com/the-virtual-brain/tvb-root.git
cd tvb-root/tvb_build
./install_full_tvb.sh

# You may need to adjust your numpy version for TVB to work:
pip install numpy==1.21
\endcode

\subsection installation_sim_openai OpenAI installation

For OpenAI installation (complete instructions at <a href="https://gym.openai.com/docs">https://gym.openai.com/docs</a>):

\code{.sh}
pip install gym pygame
\endcode

\subsection installation_sim_mujoco Mujoco installation

For Mujoco installation (complete instructions at <a href="https://mujoco.org">https://mujoco.org</a>):

\code{.sh}
MUJOCO_PATH=$HOME/.mujoco
WORKING_DIR=~/Documents/Tmujoco
sudo apt install -y libosmesa6-dev patchelf

mkdir -p $WORKING_DIR
cd $WORKING_DIR
wget https://mujoco.org/download/mujoco210-linux-x86_64.tar.gz -O mujoco.tar.gz
mkdir -p $MUJOCO_PATH
tar -xf mujoco.tar.gz -C $MUJOCO_PATH
rm mujoco.tar.gz

echo 'export LD_LIBRARY_PATH='$MUJOCO_PATH'/mujoco210/bin:$LD_LIBRARY_PATH' >> $HOME/.bashrc
echo 'export MUJOCO_PY_MUJOCO_PATH='$MUJOCO_PATH'/mujoco210/' >> $HOME/.bashrc
echo 'export LD_LIBRARY_PATH=/usr/lib/nvidia:$LD_LIBRARY_PATH' >> $HOME/.bashrc

source $HOME/.bashrc

cd $HOME
rm -r $WORKING_DIR
pip3 install mujoco_py
python3 -c "import mujoco_py"
\endcode

\subsection installation_sim_opensim OpenSim installation

For OpenSim installation (complete instructions at <a href="https://github.com/opensim-org/opensim-core">https://github.com/opensim-org/opensim-core</a>):

\code{.sh}
# Install opensim dependecies that are available through apt

sudo apt install cmake doxygen git pip openjdk-8-jdk python3-dev wget build-essential libtool autoconf pkg-config gfortran libopenblas-dev freeglut3-dev libxi-dev libxmu-dev

# Install python dependencies.
# Version 1.21 of numpy is used to stay compatible with TVB

pip install numpy==1.21

# Create opensim directories

OPENSIM_ROOT=${HOME}/opensim

OPENSIM_INSTALL_PATH=${HOME}/opensim/install
OPENSIM_BUILD_PATH=${HOME}/opensim/build

OPENSIM_DEPS_INSTALL_PATH=${HOME}/opensim/dependencies_install
OPENSIM_DEPS_BUILD_PATH=${HOME}/opensim/dependencies_build

mkdir $OPENSIM_ROOT

mkdir $OPENSIM_BUILD_PATH
mkdir $OPENSIM_INSTALL_PATH

mkdir $OPENSIM_DEPS_BUILD_PATH
mkdir $OPENSIM_DEPS_INSTALL_PATH

# Compile and install (globally) the latest version of swig
# The version available through apt (4.0.1) is incompatible with the latest opensim

sudo apt install -y libpcre2-dev bison byacc
cd ${OPENSIM_ROOT}
git clone https://github.com/swig/swig
cd ${OPENSIM_ROOT}/swig
./autogen.sh
./configure
make -j4
sudo make install

# Clone opensim

# NOTE:
# Both opensim and its dependencies should be built in Release mode (CMAKE_BUILD_TYPE=Release)!
# Building with Debug Symbols makes the size of the resulting image unacceptable

cd ${OPENSIM_ROOT}
git clone https://github.com/opensim-org/opensim-core.git

# Build some of the dependencies (simbody, spdlog...) as part of OpenSim 'superbuild'
# OPENSIM_WITH_CASADI=ON and OPENSIM_WITH_TROPTER=ON switches will trigger
# builds of certain necessary dependencies, like casadi, adolc, colpack, etc.

cd ${OPENSIM_DEPS_BUILD_PATH}
cmake ../opensim-core/dependencies/ \
      -DCMAKE_INSTALL_PREFIX=${OPENSIM_DEPS_INSTALL_PATH} \
      -DCMAKE_BUILD_TYPE=Release \
      -DOPENSIM_WITH_CASADI=ON \
      -DOPENSIM_WITH_TROPTER=ON
make -j8
make -j8 install

# Fixes "opensim/modeling/SmoothSphereHalfSpaceForce.java:49: error: unmappable character for encoding ASCII"

export JAVA_TOOL_OPTIONS=-Dfile.encoding=UTF8

# Build opensim

cd ${OPENSIM_BUILD_PATH}
cmake ../opensim-core \
      -DCMAKE_INSTALL_PREFIX="${OPENSIM_INSTALL_PATH}" \
      -DCMAKE_BUILD_TYPE=Release \
      -DOPENSIM_DEPENDENCIES_DIR="${OPENSIM_DEPS_INSTALL_PATH}" \
      -DBUILD_PYTHON_WRAPPING=ON \
      -DBUILD_JAVA_WRAPPING=ON \
      -DWITH_BTK=ON

make -j8
make -j8 install

cd $HOME

# Export opensim python wrappers and packages

echo 'export PYTHONPATH=$HOME/opensim_install/lib/python3.8/site-packages/:$PYTHONPATH' >> .bashrc

# Export opensim libraries
# Some of the dependecies (ipopt, adolc) arent installed with 'make install', we have to export them too

echo 'export LD_LIBRARY_PATH=$HOME/opensim/dependencies_install/ipopt/lib/:$LD_LIBRARY_PATH' >> .bashrc
echo 'export LD_LIBRARY_PATH=$HOME/opensim/dependencies_install/adol-c/lib64/:$LD_LIBRARY_PATH' >> .bashrc
echo 'export LD_LIBRARY_PATH=$HOME/opensim/install/lib/:$LD_LIBRARY_PATH' >> .bashrc

source $HOME/.bashrc

\endcode

\section installation_dockers Create docker images of engines and simulators for multi-container experiments

To build a docker image of NRP-Core, use the script `"docker_components/full-nrp/install.sh"`. The name and tag of the built image will be `"nrp:v0"`.

Four examples, showing how to set up an experiment running containerized simulators, are provided:
- A docker image relates to containerized version of the \ref getting_started_experiment_tf_exchange "tf_exchange" experiment (build the image with `"docker_components/minimal-nrp/install.sh"`, `"nrp_minimal:v0"` defined in the installation script is the name and tag of the docker image).
- A docker image relates to containerized OpenSim simulation, (build the image with `"docker_components/nrp-opensim/install.sh"`. `"nrp_opensim:v0"` defined in the installation script is the name and tag of the docker image).
- A docker image relates to containerized version of the `"nest_simple"` experiment (build the image with `"docker_components/nrp-nest/install.sh"`. `"nrp_nest:v0"` defined in the installation script is the name and tag of the docker image).
- A docker image relates to the containerized version of the `"husky_braitenberg_json"` experiment (build the image with `"docker_components/nrp-gazebo/install.sh"`. `"nrp_gazebo:v0"` defined in the installation script is the name and tag of the docker image).

To be able to manage containers on the remote hosts, the Manager server component must be installed. The installation script is `"docker_components/manager/install.sh"` and can be used to install dependencies inside the manager host.
*/
