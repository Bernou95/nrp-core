/*! \page running_example_exp Running the example experiments

In this section we are going to show how to run some of the example experiments. Different experiments utilize different
features of the NRP, and their use will be highlighted.

Experiments are run using the provided application \ref nrp_simulation. It takes as arguments the \ref simulation_configuration "simulation configuration file" used in the experiment and, optinally, a list of \ref plugin_system "engine plugins" to be loaded at run time. Please notice that by default only \ref python_json_engine is loaded. Any other plugin required to execute an experiment must be

\section getting_started_experiment_husky Husky braitenberg

This experiment replicates the omnipresent <i>Husky Braitenberg</i> experiment often used in previous versions of the NRP to exemplify its functionality. More details about the experiment can be found <a href="https://neurorobotics.net/Documentation/nrp/user_manual/user_interface/introduction.html#template-experiments">here</a>. It displays a virtual robot connected to a brain reacting to color stimuli.

The experiment engages two simulators, <a href="http://gazebosim.org/">Gazebo</a> as robot simulator, and <a href="https://www.nest-simulator.org/">NEST</a> as neural network simulator.

Both Gazebo and NEST are wrapped into so-called \ref engines "engines", which allow the NRP to manage simulation execution and synchronization. Data exchange between the simulators is done with the help of \ref transceiver_function "transceiver functions" and \ref devices "devices". In short, the transceiver functions allow to translate output of one simulator into input of another one, while the devices serve as generic containers for the data.

The Gazebo engine starts Gazebo server (gzserver), so you should be able to peek into the simulation by connecting with Gazebo client (`gzclient`) from a separate terminal.

To run the example, switch to the proper directory and run the NRP simulation executable:

\code{.sh}
cd examples/husky_braitenberg
NRPSimulation -c simulation_config.json -p "NRPGazeboGrpcEngine.so,NRPNestJSONEngine.so"
\endcode

<em>Please note that the NRPSimulation must be executed from the example directory!</em>

Here is a short description of all files that are located in the example directory:
- braitenberg.py - contains the setup of the neuronal network running the experiment. Used by NEST.
- cam_tf.py - transceiver function which converts images acquired by the robot into input usable by NEST.
- husky_world.sdf - simulation world file in <a href="http://sdformat.org/">Simulation Description Format</a>. Used by Gazebo.
- mot_tf.py - transceiver function that converts output from NEST into movement commands.
- simulation_config.json - simulation configuration file. An explanation of the simulation configuration can be found \ref simulation_configuration "here".


\section getting_started_experiment_husky_pf Husky braitenberg with preprocessing function

This experiment is a modification of the previous one and shows how to use one of the tools provided by the NRP - the \ref preprocessing_function "preprocessing function".
Preprocessing functions are called before transceiver functions.
Using the functionality might reduce the amount of computations in case when multiple transceiver functions would perform the same operations on certain data.

The preprocessing function used in the example converts RGB images received from Gazebo into grayscale images. The processed images are passed to one of the transceiver functions (`cam_tf.py`) and can be displayed after changing `False` to `True` in the following piece of code:

\dontinclude husky_braitenberg_with_preprocessing/cam_tf.py
\skip # Set to True
\until time.sleep

Code of the preprocessing function is located in `grayscale.py` file.

To run the example, switch to the proper directory and run the NRP simulation executable:

\code{.sh}
cd examples/husky_braitenberg_with_preprocessing
NRPSimulation -c simulation_config.json -p "NRPGazeboGrpcEngine.so,NRPNestJSONEngine.so"
\endcode


\section getting_started_experiment_husky_nest_server Husky braitenberg with NEST server

This example is again a modification of the husky braitenberg experiment, in this case using a client-only engine that connects to an instance of <a href="https://pypi.org/project/nest-server/">NEST server</a>. To load the engine, its library must be specified on the command line when launching the NRP executable:

\code{.sh}
cd examples/husky_braitenberg_nest_server
NRPSimulation -c simulation_config.json -p "NRPGazeboGrpcEngine.so,NRPNestServerEngine.so"
\endcode

This will as well start nest-server in a separate process.

\section getting_started_experiment_tf_exchange Device Exchange using the Python JSON Engine

This simple example shows two instances of \ref python_json_engine exchanging device data. The data exchange is mediated by a \ref transceiver_function "Transceiver Function".

The PythonJSONEngine implements a Python class, <i>EngineScript</i>, which methods <i>initialize</i>, <i>runLoop</i> and <i>shutdown</i> can be overriden to execute any arbitrary piece of Python code synchronously in a NRP experiment. This opens the possibility of easily integrating any simulator with a Python API in an experiment (eg.opensim, openai). Under the hood <i>EngineScript</i> manages Device I/O operations with the Simulation Loop.

In the example, which can be found in <i>examples/tf_exchange</i> folder, an engine defined in <i>engine_1.py</i> file registers a device of type <i>PythonDevice</i> and id "device1". The device stores a dictionary with the current simulation time in the engine and the number of simulation steps the engine has already advanced. Then a TF defined in <i>tf_1.py</i> get this device and relay it to a second engine defined in <i>engine_2.py</i> which simply prints out its data.

\ref python_json_engine only supports <i>PythonDevice</i> device type, which stores a Python dictionary in an attribute <i>data</i>. Therefore it allows to send any kind of data between Engines and TFs with the only constraint of it being JSON serializable. <i>PythonDevice</i> is defined in the <i>NRPPythonModule</i> module from which it can be imported. Eg:

\code{.py}
from NRPPythonModule import PythonDevice
\endcode

To launch the example just execute:

\code{.sh}
cd examples/tf_exchange
NRPSimulation -c simulation_config.json
\endcode

In this case, no additional plugins need to be specified.



*/
