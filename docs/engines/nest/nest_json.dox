/*! \page nest_json NEST JSON Engine

This engine type enables the integration of the <a href="https://www.nest-simulator.org/">NEST</a> spiking neural network simulator in NRP-core. It is based on the \ref engine_json engine.

At initialization time, it loads a NEST simulation model described in a python script. At run time, it takes care of advancing the simulation when requested and of handling datapack data transfer.

\section nest_json_datapacks DataPacks

This engine supports a unique datapack type: \ref datapacks_json. It contains the status of a set of neurons, detectors or synapsis as a dictionary or list of dictionaries. In fact, it can store the status of any NEST object which can be passed as argument to `nest.GetStatus()` and `nest.SetStatus()` functions.

nrp_core.engines.nest_json contains two functions that can be used to register datapacks with a NEST Json Engine:

- RegisterDataPack: takes as arguments a string indicating the datapack name and a NEST object which status will be linked to the datapack
- CreateDataPack: convenience function that internally calls nest.Create() and then RegisterDataPack(). Its first argument is the datapack name. The rest of the arguments the function is called with will be passed to nest.Create(). Both the datapack name and the return value of nest.Create() are then passed to RegisterDataPack().

After a datapack is registered using the functions described above, a NestEngineJSONDataPackController object is created to handle datapack I/O operations for this datapack in the Engine server. The NEST object passed to RegisterDataPack() is linked to this datapack controller. When the datapack is sent to the engine, it is passed to the controller which calls nest.SetStatus() with the datapack content. When the datapack is requested from the engine, the datapack controller calls nest.GetStatus() and stores the return value in the datapack data attribute.

In `examples/nest_simple` can be found a simple experiment showing the use of NEST JSON Engine. First, in the script `nest_simple.py`, a NEST network is defined and two datapacks with names `noise` and `voltage` are registered:

\include nest_simple/nest_simple.py

Then, in `tf_1.py`, the `voltage` JsonDataPack is accessed and its content printed out. Finally it returns a `noise` datapack that will be used to set the status of its linked NEST object after it has been received by the engine server:

\include nest_simple/tf_1.py

  <table>
  <caption id="python_datapack_attributes_table">JsonDataPack Attributes</caption>
  <tr><th>Attribute       <th>Description                  <th>Python Type <th>C type
  <tr><td>data    <td>data contained in the datapack as a NlohmannJson object    <td>NlohmannJson <td>nlohmann::json
  </table>

\section nest_json_configuration Engine Configuration Parameters

This Engine type parameters are defined in the NestJSONEngine schema (listed \ref nest_json_schema "here"), which in turn is based on \ref engine_base_schema "EngineBase" and \ref engine_comm_protocols_schema "EngineJSON" schemas and thus inherits all parameters from them.

To use the NEST JSON engine in an experiment, set `EngineType` to <b>"nest_json"</b>.

- Parameters inherited from \ref engine_base_schema "EngineBase" schema:

<table>
<tr><th>Name<th>Description<th>Type<th>Default<th>Required<th>Array
<tr><td>EngineName<td>Name of the engine<td>string<td><td>X<td>
<tr><td>EngineType<td>Engine type. Used by EngineLauncherManager to select the correct engine launcher<td>string<td><td>X<td>
<tr><td>EngineProcessLauncher<td>Engine process launcher. \ref process_launcher_schema "ProcessLauncher" used to store parameters if are needed to start an Engine<td>object<td>{"ProcCmd":"", "ProcStartParams":[], "ProcEnvParams":[], "LaunchCommand":"BasicFork"}<td><td>
<tr><td>EngineTimestep<td>Engine Timestep in seconds<td>number<td>0.01<td><td>
<tr><td>EngineCommandTimeout<td>Engine Timeout (in seconds). It tells how long to wait for the completion of the engine runStep. 0 or negative values are interpreted as no timeout<td>number<td>0.0<td><td>
</table>

- Parameters inherited from \ref engine_json "EngineJSON" schema:

<table>
<tr><th>Name<th>Description<th>Type<th>Default<th>Required<th>Array
<tr><td>ServerAddress<td>EngineJSONServer address. Should this address already be in use, the server will continue trying ports higher up<td>string<td>localhost:9002<td><td>
<tr><td>RegistrationServerAddress<td>Address EngineJSONRegistrationServer is listening at. Once the JSON engine server has bound to a port, it will use this address to register itself with the SimulationManager<td>string<td>localhost:9001<td><td>
</table>

- Parameters specific to this engine type:

<table>
<tr><th>Name<th>Description<th>Type<th>Default<th>Required<th>Array
<tr><td>NestInitFileName<td>Path to the Python script that sets up the neural network for the simulation<td>string<td><td>X<td>
<tr><td>NestRNGSeed<td>Nest RNG seed<td>integer<td>0<td><td>
</table>

\section nest_json_schema Schema

As explained above, the schema used by the NEST JSON engine inherits from \ref engine_base_schema "EngineBase" and \ref  engine_comm_protocols_schema "EngineJSON" schemas. A complete schema for the configuration of this engine is given below:

\include engines/engines_nest.json

*/
