/*! \page pysim_engine PySim Engine

This engine is based on the Python JSON Engine and exploits python APIs to interface simulations with NRP-core. The main difference between a PySim engine and a standard Python JSON engine is the way the Python APIs of several given simulators are called from a so-called Simulation Manager interface (\ref pysim_engine_simulator "SimulatorManager" and \ref pysim_engine_network "NetworkManager"). As a whole, the PySim engine still runs a simulator model that specified the engine configuration and manages the synchronization and data exchange with other engines participating in the same experiment.

In that sense, it is used in a manner very similar to the Python JSON Engine (please refer to this guide for details on how to use it). Additionally, there are example experiments in the folder examples/pysim_examples that can be used as a reference for implementing experiments including this engine.

Similarly to the Python JSON Engine, the engine behavior in each experiment is implemented by subclassing a Python class (*PySimEngineScript* or *PyNetEngineScript*) and overriding the hook methods:
- `initialize()`: executed when the engine is initialized
- `run_loop()`: executed when the engine is requested to advance its simulation (from EngineClient::runLoopStep)
- `shutdown()`: executed when the engine is requested to shutdown
- `reset()`: executed when the engine is requested to reset.

Two implementations of the PySim engine are provided. One is based on \ref  pysim_engine_simulator "SimulatorManager" to access different physic simulators (<a href="https://gym.openai.com/docs#">OpenAI </a>, <a href="https://mujoco.readthedocs.io/en/latest/APIreference.html#">Mujoco </a>, <a href="https://simtk.org/api_docs/opensim/api_docs#">OpenSim </a>) and another on \ref  pysim_engine_network "NetworkManager" to access network frameworks (<a href="https://lava-nc.org/">LAVA </a>). On these pages, you can find the description of the different PySim Engine configurations.


\section pysim_json_datapacks DataPacks

Similarly to the Python JSON engine, the PySim engine supports a unique datapack type: *JsonDataPack*. Refer to this \ref python_json_datapacks "section" for more details.

\section engine_pysim_config_section Engine Configuration Parameters

The parameters for this engine are defined in the PySimEngine schema (listed \ref engine_pysim_schema "here"), which in turn is based on \ref engine_base_schema "EngineBase" and \ref engine_comm_protocols_schema "EngineJSON" schemas, and thus inherits all parameters from them.

To use the Python Simulator engine in an experiment, set `EngineType` to <b>"py_sim"</b>.

- Parameters inherited from \ref engine_base_schema "EngineBase" schema:

<table>
<tr><th>Name<th>Description<th>Type<th>Default<th>Required<th>Array
<tr><td>EngineName<td>Name of the engine<td>string<td><td>X<td>
<tr><td>EngineType<td>Engine type. Used by EngineLauncherManager to select the correct engine launcher<td>string<td><td>X<td>
<tr><td>EngineProcCmd<td>Engine Process Launch command<td>string<td><td><td>
<tr><td>EngineProcStartParams<td>Engine Process Start Parameters<td>string<td>[]<td><td>X
<tr><td>EngineEnvParams<td>Engine Process Environment Parameters<td>string<td>[]<td><td>X
<tr><td>EngineLaunchCommand<td>\ref configuration_schema "LaunchCommand" with parameters that will be used to launch the engine process<td>object<td>{"LaunchType":"BasicFork"}<td><td>
<tr><td>EngineTimestep<td>Engine Timestep in seconds<td>number<td>0.01<td><td>
<tr><td>EngineCommandTimeout<td>Engine Timeout (in seconds). It tells how long to wait for the completion of the engine runStep. 0 or negative values are interpreted as no timeout<td>number<td>0.0<td><td>
</table>

- Parameters inherited from \ref engine_json "EngineJSON" schema:

<table>
<tr><th>Name<th>Description<th>Type<th>Default<th>Required<th>Array
<tr><td>ServerAddress<td>EngineJSONServer address. Should this address already be in use, the server will continue trying ports higher up<td>string<td>localhost:9002<td><td>
<tr><td>RegistrationServerAddress<td>Address EngineJSONRegistrationServer is listening at. Once the JSON engine server has bound to a port, it will use this address to register itself with the SimulationManager<td>string<td>localhost:9001<td><td>
</table>

\section engine_pysim_schema Schema

As explained above, the schema used by the PySim engine inherits from \ref engine_base_schema "EngineBase" and \ref  engine_comm_protocols_schema "EngineJSON" schemas. A complete schema for the configuration of this engine is given below: 

\include engines/engine_python.json

*/