/*! \page pysim_engine_network PySim Engine for network frameworks

In this engine, several simulators (<a href="https://lava-nc.org/">LAVA </a>) with python API are wrapped as functions in type of \ref python_json_engine can apply. It includes shutdown, reset, runLoop, and operations on network. The interaction with the wrapped network frameworks is performed by an instance of the class \ref network_manager, which is stored in PyNetEngineScript in the attribute self.net_manager. This attribute must be "manually" called from the PyNetEngineScript subclass in order to advance, modify or get information from the different simulators. As an example of this use, the script implementing PyNetEngineScript in experiment *examples/pysim_examples/Lava/Basic/for_lava.py* is listed below:

\include pysim_examples/Lava/Basic/for_lava.py

\section network_manager NetworkManager

The NetworkManager is a python class that acts as a bridge to connect NRP-core and Lava network supported by the Pysim Engine through the Python API of the former. 

It processes requests for simulation initialization, reset, shutdown, run step, network modification, and data retrieval. 

When instantiated, it loads the network layer types specified in the engine configuration. Additionally, a controller is attached to actuators for the defined network.

The following functions are provided by NetworkManager to interact with the Lava network:

- `run_step( laver_name, timestep_ns)`: advances the network execution and monitor data changes by the engine timestep as specified in the engine configuration. Takes as input a string for the name of the output layer. 
- `shutdown()`: shutdowns the network execution
- `create_layer(laver_name, layer_type, params)`: execution in initialization to define the layer that will be used.
- `layer_connect(in_port, out_port)`: execution in initialization to connect two network layers with layers' input and output port. The format of a port is  "<layer name>.<port name>"
- `setDataToLayer(laver_name, para_name, data)`: modify a parameter in a network layer
- `getDataFromLayer(laver_name, para_name)`: collet a parameter value from a network layer
- `create_monitor(para_name)`: create a monitor to store a data change of parameter with the format "<layer name>.<parameter name>"
- `res_plot(laver_name, para_name)`: plot the change of a parameter during layer execution


\section engine_opensim_config_section Engine Configuration Parameters

Parameters specific to network manager:

<table>
<tr><th>Name<th>Description<th>Type<th>Default<th>Required<th>Array
<tr><td>RunConfigureTag<td>To flag the network configuration type for lava<td>string<td><td>X<td>
<tr><td>Layers<td>To import the python package or python script to call different definitions of network layers<td>array<td><td>X<td>
</table>

The "Layers" is performed as a list of multiple items. Each item express a type of network layer with format "*[package name, layer name]*" 

*/