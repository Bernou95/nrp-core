/*! \page pysim_engine_network PySim Engine to call the LAVA framework

In the PySim Engine, the interactions with the wrapped network framework (<a href="https://lava-nc.org/">LAVA </a>) are performed by an instance of the class \ref network_manager, which is stored in PyNetEngineScript in the attribute self.net_manager. This attribute must be "manually" called from the PyNetEngineScript subclass in order to advance, modify or get information from the different simulators. As an example of this use, the script implementing PyNetEngineScript in experiment *examples/pysim_examples/Lava/Basic/for_lava.py* is given below:

\include pysim_examples/Lava/Basic/for_lava.py

\section network_manager NetworkManager

The NetworkManager is a python class that acts as a bridge to connect NRP-core and the LAVA framework through the Pysim Engine and the Python API of LAVA. 

More specifically, it processes requests for simulation initialization, reset, shutdown, run step, network modification, and data retrieval. Upon instanciation, it loads the network layer types specified in the engine configuration. Additionally, a controller is attached to actuators for the defined network.

The following functions are provided by NetworkManager to interact with a neural network or neuromorphic system running in LAVA:

- `run_step( laver_name, timestep_ns)`: advances the network execution and monitors data changes with the engine timestep specified in the engine configuration. Takes as input a string for the name of the output layer. 
- `shutdown()`: shutdowns network execution
- `create_layer(laver_name, layer_type, params)`: during initialization, defines a layer to be used.
- `layer_connect(in_port, out_port)`: during initialization, connects two network layers through input and output port. The format of a port is  "<layer name>.<port name>"
- `setDataToLayer(laver_name, para_name, data)`: modifies a parameter in a network layer
- `getDataFromLayer(laver_name, para_name)`: collects a parameter value from a network layer
- `create_monitor(para_name)`: creates a monitor to store a data change of parameter with the format "<layer name>.<parameter name>"
- `res_plot(laver_name, para_name)`: plots the change of a parameter during layer execution


\section engine_opensim_config_section Engine Configuration Parameters

Parameters specific to network manager:

<table>
<tr><th>Name<th>Description<th>Type<th>Default<th>Required<th>Array
<tr><td>RunConfigureTag<td>To flag the network configuration type for LAVA<td>string<td><td>X<td>
<tr><td>Layers<td>To import the python package or python script to call different definitions of network layers<td>array<td><td>X<td>
</table>

The "Layers" parameter is a list of multiple items. Each item expresses a type of network layer with the format "*[package name, layer name]*" 

*/