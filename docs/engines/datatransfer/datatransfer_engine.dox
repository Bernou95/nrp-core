/*! \page datatransfer_engine NRP DataTransfer Engine

The DataTransfer Engine brings data logging and streaming capabilities to NRP-core.
It enables users to log experiment data to file for further offline anaylisis or to stream it over the network for, e.g., remote data visualization and experiment monitoring.

The engine implementation is based on the \ref engine_grpc "Protobuf over gRPC communication protocol" and, therefore, accepts \ref datapacks_protobuf "Protobuf DataPacks". 

In transceiver functions, users can fetch datapacks from other engines and process them or send them directly to the DataTransfer Engine where they will be logged or streamed.
Which datapacks are accepted by the engine and how are they processed (i.e. whether they are logged or streamed or both) is specified in the engine json configuration. 
See \ref engine_datatransfer_config_section "below" for more details about the engine configuration parameters.

In the folder *examples/husky_braitenberg_dump* insterested users can find a complete experiment using the DataTransfer Engine.

\section datatransfer_engine_streaming Enabling Data Streaming with MQTT

As commented above, besides from logging to file, the DataTransfer Engine allows to stream datapacks over the network. 
For this purpose the MQTT protocol is used. 

In order to enable data streaming from NRP-core, the Paho MQTT library must be installed beforehand as described in \ref installation. 
Additionally, the Engine will need to connect to an MQTT broker and the latter's address specified in the engine configuration.

In case of needing to bring up your own MQTT broker, below are provided commands to quickly set one up and run it from docker.
The commands should be run from the NRP-core source root folder.

\code{.sh}
sudo docker pull eclipse-mosquitto
sudo docker run -it -p 1883:1883 -p 9010:9001 -v ${PWD}/nrp_datatransfer_grpc_engine/mosquitto.conf:/mosquitto/config/mosquitto.conf
\endcode

The resulting MQTT broker will be listening to port *1883*. 
If a different port is wished, it can be specified in *nrp_datatransfer_grpc_engine/mosquitto.conf*. 

\section datatransfer_engine_datapacks DataPacks

The DataTransfer Engine processes every incoming datapack and tries to save its "data" field to file and/or send it to and MQTT broker, depending on the experiment configuration. 

\ref datapacks_protobuf "Protobuf DataPacks", containing any protobuf message type, can be sent to the DataTransfer Engine for logging or streaming, with some limitations. 
Protobuf message types that have *repeated* fields cannot be logged to files, but can still be streamed. 

Additionally, two Protobuf message types are provided with special formatting support for logging into the file: *Dump.String* and *Dump.ArrayFloat*. 
*Dump.String* has a single field *string_stream* of string type. 
*Dump.ArrayFloat* can be used to transfer arrays as explained below.

\subsection dump_array_float Logging arrays with Dump.ArrayFloat

The *Dump.ArrayFloat* Protobuf message contains two fields:
- float_stream: repeated float field containing the array data.
- dims: repeated integer field specifying the dimensions of the array. 

The number of elements in the *dims* field specifies the number of dimensions of the array, and the value of each element the number of elements of the array in that dimension.

The DataTransfer engine supports arrays of one or two dimensions.
If *dims* is not set or has one element, the array is treated as 1-dimensional. 
If it has two, the array is treated as 2-dimensional. 
In this case the first element indicates the number of rows of the array and the second element the number of columns (*r* and *c* in the explanation below). 
The formatting of 3- or more-dimensional arrays is not supported, if *dims* has a number of elements other than 2, then *float_stream* is formatted as a 1-dimensional array.

When the engine is requested to log to file a *Dump.ArrayFloat* message *r* lines are printed to the logged file, each of them containing *c* elements from *float_stream*. 
In case the size of *float_stream* is greater than the specified dimensions (i.e. than r * c), the remaining data (not fitting into the number of rows multiplied by the number of columns) is truncated and not printed. 
In case the total size of *float_stream* is smaller, then the remaining "space" of the array is printed empty.

In the file *examples/husky_braitenberg_dump/tf_1.py* are given some examples examples for constructing *Dump.ArrayFloat*. 

\subsection logging_address Logging and streaming address

Finally, about where datapacks are logged and streamed:
- datapacks will always be logged to a file `<dataDirectory>/<timestamp>/<datapack_name>.data`, where <dataDirectory> is a configuration parameter.
- dataPacks are published to an *nrp/data/<datapack_name>* MQTT topic as serialized protobuf objects.
The type of the streamed protobuf message is published once to the topic *nrp/data/<_data_name>/type*. The data topic address (i.e. *nrp/data/<_data_name>*) is also published once to the topic *nrp/data*.


\section engine_datatransfer_config_section Engine Configuration Parameters

This Engine type parameters are defined in DataTransfer schema (listed \ref engine_datatransfer_schema "here"), which in turn is based on \ref engine_base_schema "EngineBase" and \ref engine_comm_protocols_schema "EngineGRPC" schemas and thus inherits all parameters from them.

To use this engine in an experiment, set `EngineType` to <b>"datatransfer_grpc_engine"</b>.

- Parameters inherited from \ref engine_base_schema "EngineBase" schema:

<table>
<tr><th>Name<th>Description<th>Type<th>Default<th>Required<th>Array
<tr><td>EngineName<td>Name of the engine<td>string<td><td>X<td>
<tr><td>EngineType<td>Engine type. Used by EngineLauncherManager to select the correct engine launcher<td>string<td><td>X<td>
<tr><td>EngineProcCmd<td>Engine Process Launch command<td>string<td><td><td>
<tr><td>EngineProcStartParams<td>Engine Process Start Parameters<td>string<td>[]<td><td>X
<tr><td>EngineEnvParams<td>Engine Process Environment Parameters<td>string<td>[]<td><td>X
<tr><td>EngineLaunchCommand<td>\ref configuration_schema "LaunchCommand" with parameters that will be used to launch the engine process<td>object<td>{"LaunchType":"BasicFork"}<td><td>
<tr><td>EngineTimestep<td>Engine Timestep in seconds<td>number<td>0.01<td><td>
<tr><td>EngineCommandTimeout<td>Engine Timeout (in seconds). It tells how long to wait for the completion of the engine runStep. 0 or negative values are interpreted as no timeout<td>number<td>0.0<td><td>
</table>

- Parameters inherited from the \ref engine_grpc "EngineGRPC" schema:

<table>
<tr><th>Name<th>Description<th>Type<th>Default<th>Required<th>Array
<tr><td>ServerAddress<td>gRPC Server address. Should this address already be in use, simulation initialization will fail<td>string<td>localhost:9004<td><td>
</table>

- Parameters specific to this engine type:

<table>
<tr><th>Name<th>Description<th>Type<th>Default<th>Required<th>Array
<tr><td>MQTTBroker<td>Address of the MQTT broker<td>string<td>localhost:1883<td><td>
<tr><td>dataDirectory<td>Path to the storage of file streams<td>string<td>data<td><td>
<tr><td>streamDataPackMessage<td>If true the engine will stream DataPackMessages, if false it will stream their contained data<td>boolean<td>true<td><td>
<tr><td>dumps<td>List of datapacks for transfer<td>dumpItem<td>[]<td><td>X
</table>

- dumpItem: elements of the *dumps* array above:

<table>
<tr><th>Name<th>Description<th>Type<th>Default<th>Required<th>Array
<tr><td>name<td>Name of the datapack for transfer<td>string<td><td>X<td>
<tr><td>network<td>Trigger, if the datapack should be sent to network<td>boolean<td>false<td><td>
<tr><td>file<td>Trigger, if the datapack should be sent to file<td>boolean<td>false<td><td>
</table>


\section engine_datatransfer_schema Schema

As explained above, the schema used by the DataTransfer engine inherits from \ref engine_base_schema "EngineBase" and \ref  engine_comm_protocols_schema "EngineGRPC" schemas. A complete schema for the configuration of this engine is given below:

\include engines/engine_datatransfer.json



*/