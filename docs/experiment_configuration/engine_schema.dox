/*! \page engine_base_schema EngineBase Schema

The EngineConfigs array in the simulation configuration file describes the setup of the engines that will participate in the experiment. As different types of engines require different configuration parameters, each type have a dedicated schema. For a list of the available engines and their configuration parameters see \ref nrp_engines.

Regardless of the chosen engine type, there is a set of parameters common to every engine. These are defined in the EngineBase schema presented in this page. From the list of EngineBase parameters, several deserve specific explanations, which are given in a section \ref specific_parameters "below".

\section engine_base_schema_parameters Parameters

<table>
<tr><th>Name<th>Description<th>Type<th>Default<th>Required<th>Array
<tr><td>EngineName<td>Name of the engine<td>string<td><td>X<td>
<tr><td>EngineType<td>Engine type. Used by EngineLauncherManager to select the correct engine launcher<td>string<td><td>X<td>
<tr><td>EngineProcCmd<td>Engine Process Launch command<td>string<td><td><td>
<tr><td>EngineProcStartParams<td>Engine Process Start Parameters<td>string<td>[]<td><td>X
<tr><td>EngineEnvParams<td>Engine Process Environment Parameters<td>string<td>[]<td><td>X
<tr><td>EngineLaunchCommand<td>LaunchCommand type that will be used to launch the engine process<td>string<td>BasicFork<td><td>
<tr><td>EngineTimestep<td>Engine Timestep in seconds<td>number<td>0.01<td><td>
<tr><td>EngineCommandTimeout<td>Engine Timeout (in seconds). It tells how long to wait for the completion of the engine runStep. 0 or negative values are interpreted as no timeout<td>number<td>0.0<td><td>
</table>

\section engine_base_schema_example Example

\code{.py}
{
    "EngineType": "python_json",
    "EngineName": "python_1",
    "PythonFileName": "engine_1.py"
}
\endcode

\section engine_base_schema_schema Schema

\include engines/engine_base.json

\section specific_parameters Additional notes on parameters

\subsection engine_proc_command EngineProcCmd

This parameter sets the command that will be used to launch the engine. As mentioned in the \ref json_schema section, default values are allowed to be set either in the schema or in-code, by using the \ref nrp_general_library/utils/json_schema_utils.h "json_utils::set_default" function. In the later case, the parameter should be set as not required and should not have a default parameter. This is the case of `EngineProcCmd`.

In order to allow for flexibility in the setting of `EngineProcCmd`, its default value is set in-code for every engine type. This means that <b>every new engine implementation should set a default value for `EngineProcCmd` in-code</b>. For example, in the case of the \ref nest_json, `EngineProcCmd` is set to `NRP_NEST_EXECUTABLE_PATH`, which is an environment variable pointing to nest-simulator executable.

In any case, if a value for `EngineProcCmd` is set in the configuration file, it will be used for launching the engine instead of the default value.

\subsection engine_proc_start_params EngineProcStartParams

This parameter contains an array of strings that will be added as arguments to the Engine process launch command. In order to add flexibility in the formatting on these arguments, EngineClient has a dedicated method, EngineClient::engineProcStartParams, in which `EngineProcStartParams` is read and formatted appropriately. This is a virtual method that <b>every new engine implementation should implement</b>.

\subsection engine_env_params EngineEnvParams

This case is very similar to the previous one. This parameter contains the environment variables that will be passed along with the Engine process launch command when starting the Engine process. There is a virtual EngineClient::engineProcEnvParams method that allows to format the environment variables appropriately and that <b>every new engine implementation should implement</b>.

\subsection additional_engine_configuration Additional Configuration Parameters

Engine implementations may need additional configuration parameters not present in their schemas. The convention adopted in the architecture is to store these parameters in a struct with the name `EngineTypeConfigConst`. For example, in the case of \ref gazebo_json_engine exists a GazeboJSONConfigConst:

\dontinclude gazebo_json_config.h
\skip GazeboJSONConfigConst
\until };

Two parameters are mandatory for every engine implementation:
- `EngineType`: which is used to configure the \ref engine_launchers "engine launcher" corresponding to this type of engine
- `EngineSchema`: which contains the path to the schema that will be used to validate an engine configuration for this specific type of engine. The engine configuration is passed to the EngineClient constructor as a <a href="https://github.com/nlohmann/json">nlohmann::json</a> object and validated against the specified schema in the same constructor. If the validation step fails the experiment will end with an exception.

*/
