# Download base image ubuntu 20.04

FROM nvidia/cudagl:11.0-base-ubuntu20.04

ARG NRP_USER=nrpuser
ARG NRP_GROUP=nrpgroup
ARG UID=1000
ARG GID=1000
ARG HOME_PARENT_FOLDER=/home

# Set environment

ENV HOME ${HOME_PARENT_FOLDER}/${NRP_USER}
ENV HOME_PARENT_FOLDER ${HOME_PARENT_FOLDER}
ENV NRP_INSTALL_DIR ${HOME}/.local

# Disable Prompt During Packages Installation

ARG DEBIAN_FRONTEND=noninteractive

# INSTALL sudo

RUN apt update -y && apt-get install -y sudo

ENV NVIDIA_DRIVER_CAPABILITIES compute,graphics,utility

RUN apt-get update && DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends wget

# Install Vulkan SDK
RUN wget -qO - http://packages.lunarg.com/lunarg-signing-key-pub.asc | apt-key add - && \
wget -qO /etc/apt/sources.list.d/lunarg-vulkan-1.1.121-bionic.list http://packages.lunarg.com/vulkan/1.1.121/lunarg-vulkan-1.1.121-bionic.list && \
apt update && DEBIAN_FRONTEND=noninteractive apt install -y vulkan-sdk && apt upgrade -y && apt autoremove -y

COPY nvidia_icd.json /etc/vulkan/icd.d/nvidia_icd.json

# Set NRP_USER user

RUN mkdir -p ${HOME_PARENT_FOLDER} \
    && groupadd --gid ${GID} ${NRP_GROUP} \
    && useradd --home-dir ${HOME} --create-home --uid ${UID} --gid ${GID} --groups ${NRP_GROUP} -ms /bin/bash ${NRP_USER} \
    && echo "${NRP_USER} ALL=(ALL) NOPASSWD: ALL" >> /etc/sudoers

# Set NRP_USER directories

RUN mkdir -p \
    ${NRP_INSTALL_DIR} \
    && chown -R ${NRP_USER}:${NRP_GROUP} $HOME

# Copy .bashrc for the NRP_USER

COPY --chown=${NRP_USER}:${NRP_GROUP} .ci/bashrc $HOME/.bashrc

# Copy requirements files

COPY --chown=${NRP_USER}:${NRP_GROUP} .ci/dependencies ${HOME}/.dependencies

# Install basic dependencies

RUN apt-get update
RUN apt-get -y install $(grep -vE "^\s*#" ${HOME}/.dependencies/apt/requirements.basic.txt  | tr "\n" " ")

# Pistache REST Server

RUN add-apt-repository ppa:pistache+team/unstable

# Gazebo

RUN sh -c 'echo "deb http://packages.osrfoundation.org/gazebo/ubuntu-stable `lsb_release -cs` main" > /etc/apt/sources.list.d/gazebo-stable.list'
RUN wget https://packages.osrfoundation.org/gazebo.key -O - | apt-key add -

# ROS

RUN sh -c 'echo "deb http://packages.ros.org/ros/ubuntu $(lsb_release -sc) main" > /etc/apt/sources.list.d/ros-latest.list'
RUN curl -s https://raw.githubusercontent.com/ros/rosdistro/master/ros.asc | apt-key add -

# Install CLE dependencies

RUN apt-get update
RUN apt-get -y install $(grep -vE "^\s*#" ${HOME}/.dependencies/apt/requirements.cle.txt  | tr "\n" " ")

# Fix deprecated type in OGRE (std::allocator<void>::const_pointer has been deprecated with glibc-10). Until the upstream libs are updated, use this workaround. It changes nothing, the types are the same

RUN sed -i "s/typename std::allocator<void>::const_pointer/const void*/g" /usr/include/OGRE/OgreMemorySTLAllocator.h

# Switch to NRP user

USER ${NRP_USER}
ENV USER ${NRP_USER}

RUN echo "You run the Dockerfile.unity"
RUN pip install grpcio-tools pytest docopt mpi4py

WORKDIR /home/${USER}
RUN git clone https://bitbucket.org/hbpneurorobotics/nrp-core.git
WORKDIR nrp-core
RUN git checkout unity_fix
RUN mkdir build
WORKDIR build
RUN export CC=/usr/bin/gcc-10; export CXX=/usr/bin/g++-10
RUN cmake .. -DCMAKE_INSTALL_PREFIX=/home/${USER}/.local/nrp -DENABLE_GAZEBO=OFF -DENABLE_NEST=OFF -DENABLE_ROS=OFF
RUN mkdir -p /home/${USER}/.local/nrp
RUN make
RUN make -j12 install

ENV NRP /home/${USER}/.local/nrp
# RUN echo "export NRP=/home/${USER}/.local/nrp" >> /home/${USER}/.bashrc
RUN echo "export PYTHONPATH=${NRP}/lib/python3.8/site-packages:$PYTHONPATH" >> /home/${USER}/.bashrc
RUN echo "export LD_LIBRARY_PATH=${NRP}/lib:$LD_LIBRARY_PATH" >> /home/${USER}/.bashrc
RUN echo "export PATH=$PATH:${NRP}/bin:" >> /home/${USER}/.bashrc
RUN echo ". /usr/share/gazebo-11/setup.sh" >> /home/${USER}/.bashrc
RUN echo ". /usr/share/gazebo-11/setup.sh" >> /home/${USER}/.bashrc


# EOF
